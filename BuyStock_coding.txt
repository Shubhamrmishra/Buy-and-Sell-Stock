/*We can simply use 2 loops and track every transaction and maintain a variable maxPro to
 contain the max value among all transactions
*/



//BuyStock.java
//Buy on day 2 (price = 1) and sell on day 5 (price = 6), profit = 6-1 = 5
public class BuyStock {
    public static void main(String[] args) {
        int arr[] = {7,1,5,3,6,4};
        int maxPro = maxProfit(arr);   
        System.out.println("Maximums profit is: " + maxPro);
    }
    static int maxProfit(int[] arr) {
        int maxPro = 0;
        for (int i=0; i<arr.length; i++) {           //Use a for loop of ‘i’ from 0 to arr.length
            for (int j= i+ 1; j<arr.length; j++) {    //Use another for loop from ‘i+1’ to arr.length
                if (arr[j] > arr[i]) {
                    maxPro = Math.max(arr[j] - arr[i], maxPro);   //If arr[j] > arr[i] , take the difference and compare  and store it in the maxPro variable
                }
            }
        }
        return maxPro;                    //Return maxProfit
    }
}


//SellStock.java


class SellStock{
static int maxProfit(int price[], int start, int end){

	
	if (end <= start)                  // // If the stocks can't be bought
		return 0;

    	int profit = 0;                 // Initialise the profit

	for (int i = start; i < end; i++)   // The day at which the stock must be bought
	{
		
		for (int j = i + 1; j <= end; j++)    	// The day at which the  stock must be sold
		{
			 
			if (price[j] > price[i])        // If buying the stock at ith day and selling it at jth day is profitable
			{

				
				int curr_profit = price[j] - price[i]     // Update the current profit
								+ maxProfit(price, start, i - 1)
								+ maxProfit(price, j + 1, end);

				
				profit = Math.max(profit, curr_profit);        // Update the maximum profit so far
			}
		}
	}
	return profit;
}

public static void main(String[] args)
{
	int price[] = { 7, 6, 4, 3, 1};
	int n = price.length;

    System.out.print("Maximum profit="+maxProfit(price, 0, n - 1));

  }
}

